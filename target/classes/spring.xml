<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.2.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">


	<!-- 引入属性文件,导入多个时使用通配符如:classpath*:*.properties -->
	<context:property-placeholder location="classpath:globals.properties" />

	<!-- 自动扫描(自动注入) -->
	<context:component-scan base-package="sy.service" />

	<!-- mybatis配置 -->
	<import resource="classpath:spring-mybatis.xml" />

	<!-- 使用ActiveMQ消息队列 -->
	<import resource="classpath:spring-mq.xml" />

	<!-- 使用Redis缓存 -->
	<import resource="classpath:spring-redis.xml" />


	<!-- 异常打印切面:最大一定要写在其他拦截器前面 -->
	<!-- 大部分同学的aop失效都是因为SpringMVC的容器初始化与Spring的属于两套体质,且优先级高于Spring -->
	<!-- 首先springmvc的配置文件里面扫描并实例化了controller层类,那么等到spring去扫描的时候发现内存中已经有了对象,就不会在对类进行aop增强。 -->
	<!-- 解决方案:将Controller的代理权交给cglib即在springmvc的配置文件中加入激活自动代理功能:如下 -->
	<!-- 通知spring使用cglib而不是jdk的来生成代理方法,这样 AOP可以拦截到Controller <aop:aspectj-autoproxy proxy-target-class="true"/> -->
	<bean id="exceptionUtil" class="sy.exception.ExceptionUtil" />
	<bean id="exceptionAdvisor" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
		<property name="advice" ref="exceptionUtil" />
		<property name="patterns">
			<list>
				<value>sy.*</value>
				<!-- 可以配置多重拦截路径,但这个不是拦截链 -->
				<!-- <value>sy.service.*</value> -->
				<!-- <value>sy.annotations.*</value> -->
			</list>
		</property>
	</bean>

	<!-- 使用AOP拦截器实现并发控制切面 -->
	<bean id="concurrentAdvice" class="sy.annotations.ConcurrentAdvice" />
	<bean id="concurrentAdvisor" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
		<property name="advice" ref="concurrentAdvice" />
		<property name="patterns">
			<list>
				<value>sy.service.*</value>
			</list>
		</property>
	</bean>



</beans>
