<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd 
http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">



	<!-- 项目中实现外部配置文件加载,在加载上下文的时候暴露properties到自定义子类的属性中以供程序中使用 -->
	<bean id="extPropertyConfigurer" class="sy.ext.ExtPropertyPlaceholderConfigurer">
		<property name="extPropFiles">
			<set>
				<value>classpath:globals.properties</value>
			</set>
		</property>
	</bean>

	<!-- Spring加载类之前需要实例化其他bean用depends-on -->
	<!-- 配置数据源datasource.class=com.alibaba.druid.pool.DruidDataSource -->
	<bean id="dataSource" class="${database.class}" destroy-method="close" depends-on="extPropertyConfigurer">
		<property name="driverClassName" value="${database.driverClassName}" />
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${database.url}" />
		<property name="username" value="${database.username}" />
		<property name="password" value="${database.password}" />
		<property name="defaultAutoCommit" value="${database.defaultAutoCommit}" />
		<!-- 配置初始化大小、最小、 -->
		<property name="initialSize" value="${database.initialSize}" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${database.minIdle}" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="${database.maxActive}" />
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="${database.maxIdle}" />
		<!-- 获取连接最大等待时间-超时时间 -->
		<property name="maxWait" value="${database.maxWait}" />
		<property name="validationQuery" value="${database.validationQuery}" />
		<property name="testOnBorrow" value="${database.testOnBorrow}" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${database.timeBetweenEvictionRunsMillis}" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${database.minEvictableIdleTimeMillis}" />

		<property name="testWhileIdle" value="${database.testWhileIdle}" />
		<property name="testOnReturn" value="${database.testOnReturn}" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小,mysql 不支持 poolPreparedStatements -->
		<property name="poolPreparedStatements" value="${database.poolPreparedStatements}" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="${database.maxPoolPreparedStatementPerConnectionSize}" />

		<!-- 开启Druid的监控统计功能,配置监控统计拦截的filters -->
		<property name="filters" value="${database.filters}" />
	</bean>

	<!-- 配置Mybatis会话工厂 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 加载其他mybatis配置文件路径,例如别名或分页,这里没用其他复杂功能就可以不用写了 -->
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<!-- 实体类映射文件路径,这里只有一个就写死了，多个可以使用mybatis/*.xml来替代 -->
		<property name="mapperLocations" value="classpath:sy/mapping/*.xml" />
	</bean>

	<!--动态代理实现不用写dao的实现 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 这里的basePackage 指定了dao层接口路劲，这里的dao接口不用自己实现 -->
		<property name="basePackage" value="sy.dao" />
		<!-- 如果只有一个数据源的话可以不用指定，但是如果有多个数据源的话必须要指定 -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

	<!-- 配置事物管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 配置声明式事务 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="modify*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="find*" propagation="REQUIRED" read-only="true" />
			<tx:method name="search*" propagation="REQUIRED" read-only="true" />
			<tx:method name="get*" propagation="REQUIRED" read-only="true" />
			<tx:method name="select*" propagation="REQUIRED" read-only="true" />
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>

	<!-- 事务拦截器 -->
	<aop:config>
		<aop:pointcut id="transactionPointcut" expression="execution(* sy.service..*Impl.*(..))" />
		<aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />
	</aop:config>

	<!-- 配置druid监控spring jdbc -->
	<bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
	</bean>
	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
		<property name="patterns">
			<list>
				<value>sy.service.*</value>
			</list>
		</property>
	</bean>
	<aop:config>
		<aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />
	</aop:config>

</beans>	